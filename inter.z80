;;;; inter.z80  -- trivial interpreter for a stack-language

;;; Overview
;;
;; This interpreter can be compiled with pasmo, and will allow the
;; interpretation of a simple stack-language.
;;
;; We're not really a stack-language, we have a single location which
;; can be used to store a number, the accumulator or A register.
;;
;; There is support for I/O to/from arbitrary ports, as well as a RAM
;; reading/writing - both of these use a dedicated storage register
;; port or RAM location to use for input or output.
;;
;; Finally we have a dedicated K-register for loop-operations.
;;
;; When the REPL is used the currently selected I/O port is shown in
;; the prompt.
;;

;;; Compilation
;;
;; Compile with PASMO, defining "REPL" as 1 if you wish to use the
;; intepreter interactively, or 0 if you wish to execute a simple test-input
;; and terminate.
;;

;;; Valid inputs:
;;
;; 0-9:  Build up a number
;;   #:  Set the I/O register to be the contents of the accumulator.
;;   c:  Clear the accumulator.
;;   i:  Read a byte of input, from the selected I/O port, and place it in the accumulator.
;;   g:  Read the stored value of the memory address, and CALL it.
;;   h:  Halt for the number of times specified in the accumulator.
;;   k:  Copy the accumulator to the k-register.
;;   K:  Copy the k-register to the accumulator.
;;   m:  Set the memory address to read/write to from the contents of the accumulator.
;;   M:  Set the accumulator to the memory-address in the M-register.
;;   n:  Write a newline.
;;   o:  Write the contents of the accumulator to the I/O port selected.
;;   p:  Print the four-digit value held in the accumulator.
;;   P:  Print the two-digit value held in the lower half of the accumulator.
;;   q:  Quit, if we're in REPL-mode
;;   r:  Read the contents of the memory-address, and place in the storage area.
;;   w:  Write the contents of the storage-area (byte) to the selected memory address.
;;   x:  Print the character whos ASCII code is stored in the accumulator.
;;   _:  Print the string contained between "_" and "_".
;; " ":  Whitespace is skipped over
;;
;; All other inputs are ignored.
;;

;;; TODO
;;
;;  - Nested loops wouldn't be impossible.
;;
;;  - Allow either stack operations, or the use of named variables
;;    - A single "temporary area" is too limiting.
;;
;;  - Add "+", "-", etc.
;;
;;  - Allow conditionals of some kind.  []
;;

;;; Sample code
;;
;;  "c3#ip"
;;    1.1: Clear the accumulator
;;    1.2: Store the value 3 in the accumulator.
;;    1.3: Use the accumulator to set the I/O register-value (3).
;;    1.4: Read from the currently selected I/O port (3)
;;    1.5: Print the value just read
;;
;;  "c42p"
;;    1.1: Clear the accumulator.
;;    1.2: Store the value 42 (decimal) in the accumulator.
;;    1.3: Print the value from the accumulator.
;;
;;  "42x"
;;    1.1: Store the value 42 (decimal) in the accumulator.
;;    1.2: Print the character with that ASCII value ("*")
;;
;;  "p"
;;    1.1: Print the contents of the accumulator (which will default to 0)
;;
;;  "c72xc73xn"
;;    1.1: "c" will clear the accumulator.
;;    1.2: 72 -> store the number 72 in the accumulator.
;;    1.3:  x -> print the character stored in the accumulator "H", as ASCII
;;    1.4: "c" will clear the accumulator.
;;    1.5: 73 -> store the number 73 in the accumulator.
;;    1.6:  x -> print the character stored in the accumulator "I", as ASCCI
;;    1.7: "n" print a newline

MACRO PUSH_ALL
        push af
        push bc
        push hl
      ENDM


;
; Simple macro to pop all (important) registers.
;
MACRO POP_ALL
        pop hl
        pop bc
        pop af
      ENDM

      ;
      ; CP/M binaries start at 0x100
      ;
      ORG 0x100

      ;
      ; Perform the init required
      ;
      call bios_init

      ;
      ; We can be built as a REPL, or as a test-driver.
      ;
IF REPL

      ;
      ; REPL will prompt for input, and execute it, endlessly
      ;
repl_loop:

      ; Fill input-buffer with NULL
      ld hl, input_buffer+2
      ld bc, 200
repl_loop_reset_input:
      ld (hl), 0x00
      inc hl
      djnz repl_loop_reset_input

      ; The start of the prompt
      call output_newline
      ld a, '['
      call bios_output_character

      ;
      ; Show the I/O port - 0x00-0xff
      ;
      ld hl, io_port
      ld c, (hl)
      call output_8_bit_number

      ; The end of the prompt
      ld a, ']'
      call bios_output_character
      ld a, '>'
      call bios_output_character


      ;
      ; Read input from the user.
      ;
      ld de, input_buffer
      call bios_input_line

      ;
      ; Print a newline
      ;
      call output_newline

      ;
      ; Now interpret the string
      ;
      ld hl, input_buffer + 2
      call interpret

      ;
      ; Repeat
      ;
      jr repl_loop

ELSE

      ;
      ; Call the interpreter with a static string
      ;
      ld hl, sample_str
      call interpret

ENDIF

   ret


;
; This is the entry-point to our interpreter.
;
; Inputs:
;   String to interpret in HL
;
; Outputs:
;   None
;
; Execution will continue until a NUL is detected, or an invalid character
; is hit.
;
interpret:

        ;;
        ;; Get the character to execute in A
        ;;
        ;; If it is 0x00 then we're done
        ;;
        ld a, (hl)
        cp 0x00
        ret z

        ;;
        ;; Point to the next character
        ;;
        inc hl

        ;;
        ;; Skip spaces, newlines TABs.
        ;;
        cp 0x20
        jr z, interpret
        cp 0x07 ;; '\t'
        jr z, interpret
        cp 0x0A ;; '\n'
        jr z, interpret

        ;;
        ;; Is this a numeric character?
        ;;
        cp '0'-1
        jr c, not_number
        cp '9'+1
        jr nc, not_number
        jp digit

not_number:
        ;;
        ;; Is it a C?
        ;;
        cp 'c'
        jp z, clear_accumulator

        ;;
        ;; Is it a G?
        ;;
        cp 'g'
        jp z, ram_call

        ;;
        ;; Is it a H?
        ;;
        cp 'h'
        jp z, delay_operation

        ;;
        ;; Is it an I?
        ;;
        cp 'i'
        jp z, io_port_in

        ;;
        ;; Is it an M?
        ;;
        cp 'm'
        jp z, m_register_set
        cp 'M'
        jp z, m_register_get

        ;;
        ;; Write a newline
        ;;
        cp 'n'
        jp nz, not_output_newline

        call output_newline
        jr interpret

not_output_newline:
        ;;
        ;; Is it an O?
        ;;
        cp 'o'
        jp z, io_port_out

        ;;
        ;; Is it a P?
        ;;
        cp 'p'
        jp z, print_accumulator_full
        cp 'P'
        jp z, print_accumulator_bottom

        ;;
        ;; Q will quit
        cp 'q'
        jr z, quit

        ;;
        ;; Is it a R?
        cp 'r'
        jp z, ram_read

        ;;
        ;; Is it a W?
        cp 'w'
        jp z, ram_write

        ;;
        ;; Is it a X?
        ;;
        cp 'x'
        jp z, output_accumulator_as_char

        ;; Is this an I/O port flag?
        cp 'u'
        jp z, io_port_set
        cp 'U'
        jp z, io_port_get

        ;; Is this string output?
        cp '_'
        jp z, string_output

        ;; Is this an K-register set?
        cp 'k'
        jp z, k_register_set

        ;; Is this an K-register get?
        cp 'K'
        jp z, k_register_get

        ;; is this a loop?
        cp '{'
        jp z, k_register_loop

        ;; is this the end of a loop?
        cp '}'
        jp z, k_register_loop_again


        ;; If we got here we found a character we can't understand
        ;; Show that, and abort
        ld de, error_character_msg
        call bios_output_string

        ; show the character itself
        call bios_output_character
        ret

;; Quit - If in REPL mode then terminate
;;
quit:
IF REPL
        call bios_exit
ENDIF
        jp interpret


;;
;; Digit - Called if the input contains a number.
;;
;; Inputs:
;;  - A register contains the ASCII character.
;;  - HL register contains pointer to next character of input
;;
digit:
        PUSH_ALL

        ; we're called with the numerical digit in A,
        ; and the address of the NEXT digit stored in HL
        ;
        ; We're going to cheat and use a routine that wants to
        ; read the start of the string
        dec hl

        push hl
        pop de

        call atoui_16

        ; HL has the result - copy to BC
        push hl
        pop bc

        ; DE points to the value after the end
        ; of the string.  This is where we need to continue
        ; execution, so we save this to restore HL to that later.
        ld hl, xx
        ld (hl),d
        inc hl
        ld (hl), e

        ; save the value we parsed into the accumulator
        ld hl, a_register
        ld (hl), b
        inc hl
        ld (hl), c


        POP_ALL

        ; Now point HL to the next character to interpret
        ld hl,xx
        ld a, (hl)
        inc hl
        ld l, (hl)
        ld h, a
        jp interpret

;; temporary storage for the HL register
;; since we use push-all/pop all we can't save it
;; on the stack so easily.
xx:
        DB 0x00
        DB 0x00

atoui_16:
;Input:
;     DE points to the string
;Outputs:
;     HL is the result
;     A is the 8-bit value of the number
;     DE points to the byte after the number
;Destroys:
;     BC
;       if the string is non-empty, BC is HL/10
;Size:  24 bytes
;Speed: 42+d(104+{0,9})
;       d is the number of digits in the number
;       max is 640 cycles for a 5 digit number
;Assuming no leading zeros:
;1 digit:  146cc
;2 digit:  250cc
;3 digit:  354cc or 363cc (avg: 354.126cc)
;4 digit:  458cc or 467cc (avg: 458.27cc)
;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc)
;avg: 544.81158447265625cc (544+13297/16384)
;===============================================================
  ld hl,0
_:
  ld a,(de)
  sub 30h
  cp 10
  ret nc
  inc de
  ld b,h
  ld c,l
  add hl,hl
  add hl,hl
  add hl,bc
  add hl,hl
  add a,l
  ld l,a
  jr nc,_
  inc h
  jp _


;;
;; Called if we've got a C in the input; clear the accumulator
;;
clear_accumulator:
        push hl
        ld hl, a_register
        xor a
        ld (hl),a
        inc hl
        ld (hl), a
        pop hl
        jp interpret


;;
;; Called if we've got M; set the memory address to read/write
;;
m_register_set:
        push hl
        ld hl, m_register
        call store_accumulator
        pop hl
        jp interpret

;;
;; Called if we've got M, get the M-register to the accumulator
;;
m_register_get:
        push hl

        ; get the value
        ld hl, m_register
        ld d, (hl)
        inc hl
        ld e, (hl)

        ; save it
        ld hl, a_register
        ld (hl), d
        inc hl
        ld (hl), e

        pop hl
        jp interpret


;;
;; Called if we've got a G in the input, call the address stored
;; in the memory register.
;;
ram_call:
        ; return-address
        ld hl, interpret
        push hl

        ; get the ram address in HL
        ld hl, m_register
        ld a, (hl)
        inc hl
        ld l, (hl)
        ld h,a

        ; call it
        push hl
        ret


;;
;; Called if we've got an R in the input, perform a RAM read.
;;
;; Store the result in the temporary storage area, and increment the
;; RAM address
;;
ram_read:
        PUSH_ALL
        ; get the ram address to read in HL
        ld hl, m_register
        ld a, (hl)
        inc hl
        ld l, (hl)
        ld h,a

        ; read the content
        ld a, (hl)

        ; store in temporary area
        ld hl, a_register
        ld (hl), 0x00
        inc hl
        ld (hl), a

        ; Increment the contents of the M-register
        call m_register_inc

        POP_ALL
        jp interpret


;; Increment the contents of the M-register.
;;
;; This is done every time we have a RAM read/write to ease loops.
;;
m_register_inc:
        ; set DE with the contents of the M-register
        ld hl, m_register
        ld d, (hl)
        inc hl
        ld e, (hl)

        ; increment
        inc de

        ; write back
        dec hl
        ld (hl), d
        inc hl
        ld (hl), e
        ret

;;
;; called if we've got a W in the input, write to the memory address
;; stored in the memory-area.
;;
ram_write:
        PUSH_ALL
        ; get the ram address to write in HL
        ld hl, m_register
        ld a, (hl)
        inc hl
        ld l, (hl)
        ld h,a

        ; get the value to write in A
        push hl
        ld hl, a_register+1
        ld a,(hl)
        pop hl

        ; Write now.
        ld (hl),a

        ; Increment the contents of the M-register
        call m_register_inc

        POP_ALL
        jp interpret


;;
;; Called if we've got an I in the input, perform an I/O read
;;
;; Store the result in the temporary storage area
;;
io_port_in:
        PUSH_ALL
        ; get the port to use
        ld hl, io_port
        ld c, (hl)

        ; read
        in a, (c)

        ; store
        ld hl, a_register
        ld (hl), 0x00
        inc hl
        ld (hl),a
        POP_ALL
        jp interpret

;;
;; Called via 'n', which writes a newline
;;
output_newline:
        ld a, 0x0A
        call bios_output_character
        ld a, 0x0D
        call bios_output_character
        ret

;;
;; Called if we've got an O in the input, perform an I/O write.
;;
;; The temporary storage area will have the byte to write.
;;
io_port_out:
        PUSH_ALL

        ; get the port
        ld hl, io_port
        ld c, (hl)

        ; get the value to write
        ld hl, a_register+1
        ld a, (hl)

        ; write
        out (c), a
        POP_ALL
        jp interpret

;;
;; Called if we've got a P in the input; show the contents of the temporary
;; store, as a four-digit hex number.
;;
print_accumulator_full:
        PUSH_ALL
        ld hl, a_register
        ld a, (hl)
        inc hl
        ld l, (hl)
        ld h, a
        call DisplayHLAsHex

        POP_ALL
        jp interpret


;;
print_accumulator_bottom:
        PUSH_ALL
        ld hl, a_register+1
        ld c, (hl)
        call output_8_bit_number

        POP_ALL
        jp interpret


;;
;; Called if we've been given "h" in the input.
;;
;; Call HALT the number of times specified in the temporary storage area
;;
delay_operation:
        PUSH_ALL
        ; get value
        ld hl, a_register
        ld d, (hl)
        inc hl
        ld e, (hl)

delay_operation_loop:
        halt

        dec de
        ld a, d
        or e
        jr nz, delay_operation_loop

        POP_ALL
        jp interpret


;; Store the contents of the accumulator in the given address.
;;
;; Inputs:
;;   HL the address to store the accumulator
;;
store_accumulator:
        push hl
        push hl

        ; dl = temporary store value
        ld hl, a_register
        ld d,(hl)
        inc hl
        ld e, (hl)

        ; now set the value
        pop hl
        ld (hl), d
        inc hl
        ld (hl), e
        pop hl
        ret


;; Store the lower-half of the accumulator in the given address
;;
;; Inputs:
;;   HL the address to store the accumulator
;;
store_accumulator_lower:
        push hl

        ; dl = temporary store value
        ld hl, a_register + 1
        ld e, (hl)

        ; now set the value
        pop hl
        ld (hl), e
        ret

;;
;; Copy the lower part of the accumulator from the given location
;;
;; Inputs:
;;   Address to copy from in HL
;;
reg_to_accumulator_lower:
        ; get the value
        ld a,(hl)

        ld hl, a_register
        ld (hl), 0x00
        inc hl
        ld (hl),a
        ret

;;
;; Called if we've been given "u" in the input.
;;
;; Update the current I/O port, with the contents of the accumulator.
;;
io_port_set:
        push hl
        ld hl, io_port
        call store_accumulator_lower
        pop hl
        jp interpret

;;
;; Called if we've been given "U", copy the U-register to the accumulator.
;;
io_port_get:
        push hl
        ld hl, io_port
        call  reg_to_accumulator_lower
        pop hl
        jp interpret


;;
;; Called if we've been given "k", copy the accumulator into the k-register
;;
k_register_set:
        push hl
        ld hl, k_register
        call store_accumulator_lower
        pop hl
        jp interpret



;;
;; Called if we've been given "K", copy the k-register to the accumulator.
;;
k_register_get:
        push hl
        ld hl, k_register
        call reg_to_accumulator_lower
        pop hl
        jp interpret

;;
;; Called to handle a loop.
;;
k_register_loop:
        ;;
        ;; Given input "4k{_Hello ...}"
        ;;
        ;; HL points to the character after the loop-start so "_" in our case.
        ;;
        ;; If the value of the K register is zero we move HL to the
        ;; value after } and return.
        ;;
        ;; Otherwise we decrement K-register, and have to run the sub-body.
        ;;
        ;; NOTE: No nesting of loops
        ;;
        push hl
        ld hl, k_register
        ld a,(hl)
        pop hl

        cp 0
        jr z, loop_time_over

        ;;  Decrease K - so that the iteration will eventually end.
        push hl
        ld hl,k_register
        dec (hl)
        pop hl

        ;; Now we're inside the loop-body, and we want to run it.
        ;; so we can just jump back to the interpreter.
        jp interpret


        ;; Skip the loop, by going forward to the closing character
        ;;
        ;; TODO / FIXME: We could count open braces to allow nested loops...
loop_time_over:
        ld a, (hl)
        inc hl
        cp '}'
        jp z, interpret
        jr loop_time_over


;;
;; Called at loop-close time, when a } is seen
;;
;; We have HL pointing to the character after the loop, and we
;; want to change it to point back to the start of the loop.
;;
;; TODO / FIXME: We could count brace-pairs to allow nested loops
;;
k_register_loop_again:
        ld a, (hl)
        cp '{'
        jp z, interpret
        dec hl
        jr k_register_loop_again

;;
;; Called when we see "_hello, world_"
;;
string_output:
        ld a,(hl)
        cp '_'
        jr z, string_output_over
        call bios_output_character
        inc hl
        jr string_output
string_output_over:
        inc hl
        jp interpret

;;
;; called if we've got an X in the input
;;
;; Show the temporary-storage character, as an ASCII character
;;
output_accumulator_as_char:
        PUSH_ALL
        ld hl, a_register+1
        ld a, (hl)
        call bios_output_character
        POP_ALL
        jp interpret


;
; Display the contents of HL as a hexadecimal number.
;
DisplayHLAsHex:
        PUSH_ALL
        ld  c,h
        call  output_8_bit_number
        ld  c,l
        call output_8_bit_number
        POP_ALL
        ret


;;
;; Read the two-digit HEX number from HL, and convert to an integer
;; stored in the A-register.
;;
;; HL will be incremented twice.
;;
read_8_bit_ascii_number:
	ld		a, (hl)
        ;; is it lower-case?  If so upper-case it.
        cp 'a'
        jr c, read_8_bit_ascii_number_uc
        cp 'z'
        jr nc, read_8_bit_ascii_number_uc
        sub 32
read_8_bit_ascii_number_uc:
        call		read_8_bit_ascii_number_hex
        add		a, a
        add		a, a
        add		a, a
        add		a, a
        ld		d, a
	inc		hl
        ld		a, (hl)
        call		read_8_bit_ascii_number_hex
        or		d
	inc		hl
        ret
read_8_bit_ascii_number_hex:
        sub		'0'
        cp		10
        ret		c
        sub		'A'-'0'-10
        ret

;;
;; Display the 8-bit number stored in C in hex.
;;
output_8_bit_number:
        ld  a,c
        rra
        rra
        rra
        rra
        call Conv
        ld  a,c
Conv:
        and  $0F
        add  a,$90
        daa
        adc  a,$40
        daa
        ld e, a
        call bios_output_character
        ret



include "bios.z80"

;;
;; The string we interpret when not in REPL mode.
;;
sample_str:
        DB "10k{Kp_ OK!_n}"
        DB 0x00

;;
;; We allow a single number to be entered into the storage-area, and used
;; for various purposes.  The value is copied here.
;;
;; The maximum value is 0xFFFF
;;
a_register:
        DB 0x00
        DB 0x00

;;
;; I/O port which is currently selected
;;
io_port:
        DB 0x00


;;
;; K-register is used for loop operations.
;;
k_register:
        DB 0x00



;;
;; RAM address which is to be used for reading/writing.
;;
m_register:
        DB 0x00
        DB 0x00


;;
;; Error message when unknown characters are input
;;
error_character_msg:
        DB "Unknown character in input:$"

;;
;; Input buffer, when using the REPL
;;
IF REPL
input_buffer:
        DB 0x00
        DB 0x00
ENDIF
