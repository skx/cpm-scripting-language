;;;; inter.z80  -- trivial interpreter for a stack-language

;;; Overview
;;
;; This interpreter can be compiled with pasmo, and will allow the
;; interpretation of a simple stack-language.
;;
;; We're not really a stack-language, we have a single location which
;; can be used to store a number, and in the future that can be used
;; for various things.  There is support for I/O to/from arbitrary ports,
;; and when the REPL is used the currently selected I/O port is shown in
;; the prompt.
;;

;;; Compilation
;;
;; Compile with PASMO, defining "REPL" as 1 if you wish to use the
;; intepreter interactively, or 0 if you wish to execute a simple test-input
;; and terminate.
;;

;;; Valid inputs:
;;
;; 0-9:  Build up a number
;;   #:  Set I/O to use the port in the storage-area
;;  cC:  Clear the number in the storage-area
;;  iI:  Read a byte of input, from the selected I/O port, and place it in the storage-area
;;  oO:  Write the contents of the storage-area to the I/O port selected.
;;  pP:  Print the number in the storage-area
;;  qQ:  Quit, if we're in REPL-mode
;;  xX:  Print the character whos ASCII code is stored in the storage-area
;; " ":  Whitespace is skipped over
;;
;; All other inputs are ignored.
;;

;;; TODO
;;
;;  - Allow either stack operations, or the use of named variables
;;    - A single "temporary area" is too limiting.
;;
;;  - Add "+", "-", etc.
;;
;;  - Allow conditionals, or loops, of some kind.
;;

;;; Sample code
;;
;;  "c3#ip"
;;    1.1: Clear the temporary value
;;    1.2: Store the value 3 in the temporary area
;;    1.3: Use the temporary area to set the I/O port (3).
;;    1.4: Read from the currently selected I/O port (3)
;;    1.5: Print the value just read
;;
;;  "c42p"
;;    1.1: Clear the temporary value
;;    1.2: Store the value 42 (decimal) in the temporary area
;;    1.3: Print the value from the temporary area
;;
;;  "42x"
;;    1.1: Store the value 42 (decimal) in the temporary area
;;    1.2: Print the character with that ASCII value ("*")
;;
;;  "p"
;;    1.1: Print the contents of the temporary area (which will default to 0)
;;
;;  "c72xc73xc10x"
;;    1.1: "c" will clear the temporary area.
;;    1.2: 72 -> store the number 72 in the temporary area
;;    1.3:  x -> print the character stored in the temporary area "H"
;;    1.4: "c" will clear the temporary area.
;;    1.5: 73 -> store the number 73 in the temporary area
;;    1.6:  x -> print the character stored in the temporary area "I"
;;    1.7: "c" will clear the temporary area.
;;    1.8: 10 -> store the number 10 in the temporary area
;;    1.9:  x -> print the character stored in the temporary area "\n"

MACRO PUSH_ALL
        push af
        push bc
        push de
        push hl
      ENDM


;
; Simple macro to pop all (important) registers.
;
MACRO POP_ALL
        pop hl
        pop de
        pop bc
        pop af
      ENDM

      ;
      ; CP/M binaries start at 0x100
      ;
      ORG 0x100

      ;
      ; We can be built as a REPL, or as a test-driver.
      ;
IF REPL

      ;
      ; REPL will prompt for input, and execute it, endlessly
      ;
repl_loop:

      ; Fill input-buffer with NULL
      ld hl, input_buffer+2
      ld bc, 200
repl_loop_reset:
      ld (hl), 0x00
      inc hl
      djnz repl_loop_reset

      ; The start of the prompt
      ld a, 0x0a
      call bios_output_character
      ld a, 0x0d
      call bios_output_character
      ld a, '['
      call bios_output_character

      ;
      ; Show the I/O port - 0x00-0xff
      ;
      ld hl, io_port
      ld c, (hl)
      call output_8_bit_number

      ; The end of the prompt
      ld a, ']'
      call bios_output_character
      ld a, '>'
      call bios_output_character


      ;
      ; Read input - 200 bytes, starting at the input-buffer
      ;
      ld de, input_buffer
      ld a, 200
      ld (de),a
      ld c, 0x0A
      call 0x005

      ;
      ; Print a newline
      ;
      ld a, 0x0A
      call bios_output_character

      ;
      ; Now interpret the string
      ;
      ld hl, input_buffer + 2
      call interpret

      ;
      ; Repeat
      ;
      jr repl_loop

ELSE

   ;
   ; Call the interpreter with a static string
   ;
   ld hl, sample_str
   call interpret

ENDIF

   ret


;
; This is the entry-point to our interpreter.
;
; Inputs:
;   String to interpret in HL
;
; Outputs:
;   None
interpret:

        ;;
        ;; Get the character to execute in A
        ;;
        ;; If it is 0x00 then we're done
        ;;
        ld a, (hl)
        cp 0x00
        ret z

        ;;
        ;; Point to the next character
        ;;
        inc hl

        ;;
        ;; Now we need to process the input.
        ;;
        ;; Skip spaces, newlines TABs.
        ;;
        cp 0x20
        jr z, interpret
        cp 0x07 ;; '\t'
        jr z, interpret
        cp 0x0A ;; '\n'
        jr z, interpret

        ;;
        ;; Is it an I?
        ;;
        cp 'i'
        jp z, io_port_in
        cp 'I'
        jp z, io_port_in

        ;;
        ;; Is it an O?
        ;;
        cp 'o'
        jp z, io_port_out
        cp 'O'
        jp z, io_port_out

        ;;
        ;; Is it a P?
        ;;
        cp 'p'
        jp z, print_stack
        cp 'P'
        jp z, print_stack

        ;;
        ;; Q will quit
        cp 'q'
        jr z, quit
        cp 'Q'
        jr z,quit

        ;;
        ;; Is it a C?
        ;;
        cp 'c'
        jp z, clear_stack
        cp 'C'
        jp z, clear_stack

        ;;
        ;; Is it a X?
        ;;
        cp 'x'
        jp z, output_stack_char
        cp 'X'
        jp z, output_stack_char

        ;;
        ;; Is it a digit?
        ;;
        cp '0'
        jr z, digit
        cp '1'
        jr z, digit
        cp '2'
        jr z, digit
        cp '3'
        jr z, digit
        cp '4'
        jr z, digit
        cp '5'
        jr z, digit
        cp '6'
        jr z, digit
        cp '7'
        jr z, digit
        cp '8'
        jr z, digit
        cp '9'
        jr z, digit

        ;; Is this an I/O port flag?
        cp '#'
        jp z, io_port_set

        ;; If we got here we found a character we can't understand
        ;; Show that, and abort
        ld de, error_character_msg
        call bios_output_string

        ; show the character itself
        call bios_output_character
        ret

;; Quit - If in REPL mode then terminate
;;
quit:
IF REPL
        ld c, 0x0
        call 0x0005
ENDIF
        jp interpret


;;
;; Digit - Called if the input contains a number.
;;
;; Inputs:
;;  - A register contains the ASCII character.
;;  - HL register contains pointer to next character of input
;;
digit:
        PUSH_ALL

        ; we're called with the numerical digit in A,
        ; and the address of the NEXT digit stored in HL
        ;
        ; We're going to cheat and use a routine that wants to
        ; read the start of the string
        dec hl

        push hl
        pop de

        call atoui_16

        ; hl has the result
        push hl
        pop bc

        ; DE points to the value after
        ld hl, xx
        ld (hl),d
        inc hl
        ld (hl), e

        ; save the value
        ld hl, tmp_store
        ld (hl), b
        inc hl
        ld (hl), c


        POP_ALL

        ld hl,xx
        ld a, (hl)
        inc hl
        ld l, (hl)
        ld h, a
        jp interpret

xx:
        DB 0x00
        DB 0x00

string_to_uint16:
atoui_16:
;Input:
;     DE points to the string
;Outputs:
;     HL is the result
;     A is the 8-bit value of the number
;     DE points to the byte after the number
;Destroys:
;     BC
;       if the string is non-empty, BC is HL/10
;Size:  24 bytes
;Speed: 42+d(104+{0,9})
;       d is the number of digits in the number
;       max is 640 cycles for a 5 digit number
;Assuming no leading zeros:
;1 digit:  146cc
;2 digit:  250cc
;3 digit:  354cc or 363cc (avg: 354.126cc)
;4 digit:  458cc or 467cc (avg: 458.27cc)
;5 digit:  562cc or 571cc or 580cc (avg: 562.4104cc)
;avg: 544.81158447265625cc (544+13297/16384)
;===============================================================
  ld hl,0
_:
  ld a,(de)
  sub 30h
  cp 10
  ret nc
  inc de
  ld b,h
  ld c,l
  add hl,hl
  add hl,hl
  add hl,bc
  add hl,hl
  add a,l
  ld l,a
  jr nc,_
  inc h
  jp _

;;
;; Called if we've got a C in the input; clear the temporary store
;;
clear_stack:
        PUSH_ALL
        ld hl, tmp_store
        ld (hl), 0x00
        inc hl
        ld (hl), 0x00
        POP_ALL
        jp interpret

;;
;; Called if we've got an I in the input, perform an I/O read
;;
;; Store the result in the temporary storage area
;;
io_port_in:
        PUSH_ALL
        ; get the port to use
        ld hl, io_port
        ld c, (hl)

        ; read
        in a, (c)

        ; store
        ld hl, tmp_store
        ld (hl), 0x0
        inc hl
        ld (hl),a
        POP_ALL
        jp interpret

;;
;; Called if we've got an O in the input, perform an I/O write.
;;
;; The temporary storage area will have the byte to write.
;;
io_port_out:
        PUSH_ALL

        ; get the port
        ld hl, io_port
        ld c, (hl)

        ; get the value to write
        ld hl, tmp_store+1
        ld a, (hl)

        ; write
        out (c), a
        POP_ALL
        jp interpret

;;
;; Called if we've got a P in the input; show the contents of the temporary
;; store, as decimal number.
;;
;; NOTE: Shows five digits..
;;
print_stack:
        PUSH_ALL
        ld hl, tmp_store
        ld a, (hl)
        inc hl
        ld l, (hl)
        ld h, a
        call DisplayHLAsHex

        ; newline after the output
        ld a, 0x0A
        call bios_output_character

        POP_ALL
        jp interpret


;;
;; Called if we've been given "#" in the input.
;;
;; Update the current I/O port, with the contents of the storage-area
;;
io_port_set:
        PUSH_ALL
        ld hl, tmp_store+1
        ld a, (hl)
        ld hl, io_port
        ld (hl),a
        POP_ALL
        jp interpret


;;
;; called if we've got an X in the input
;;
;; Show the temporary-storage character, as an ASCII character
;;
output_stack_char:
        PUSH_ALL
        ld hl, tmp_store
        ld a, (hl)
        call bios_output_character
        POP_ALL
        jp interpret


;;
;; Output a single character
;;
;; Input - the character to print in A
;;
bios_output_character:
        PUSH_ALL
        ld e, a
        ld c, 0x02
        call 0x005
        POP_ALL
        ret

;;
;; Output a string
;;
;; Inputs - the string to print in DE, terminated with "$".
;;
bios_output_string:
        PUSH_ALL
        ld c, 0x09
        call 0x005
        POP_ALL
        ret


;
; Display the contents of HL as a hexadecimal number.
;
DisplayHLAsHex:
        PUSH_ALL
        ld  c,h
        call  output_8_bit_number
        ld  c,l
        call output_8_bit_number
        POP_ALL
        ret


;;
;; Read the two-digit HEX number from HL, and convert to an integer
;; stored in the A-register.
;;
;; HL will be incremented twice.
;;
read_8_bit_ascii_number:
	ld		a, (hl)
        ;; is it lower-case?  If so upper-case it.
        cp 'a'
        jr c, read_8_bit_ascii_number_uc
        cp 'z'
        jr nc, read_8_bit_ascii_number_uc
        sub 32
read_8_bit_ascii_number_uc:
        call		read_8_bit_ascii_number_hex
        add		a, a
        add		a, a
        add		a, a
        add		a, a
        ld		d, a
	inc		hl
        ld		a, (hl)
        call		read_8_bit_ascii_number_hex
        or		d
	inc		hl
        ret
read_8_bit_ascii_number_hex:
        sub		'0'
        cp		10
        ret		c
        sub		'A'-'0'-10
        ret

;;
;; Display the 8-bit number stored in C in hex.
;;
output_8_bit_number:
        ld  a,c
        rra
        rra
        rra
        rra
        call  Conv
        ld  a,c
Conv:
        and  $0F
        add  a,$90
        daa
        adc  a,$40
        daa
        ld e, a
        call bios_output_character
        ret


;;
;; The string we interpret
;;
sample_str:
        DB "p c123pc42xxxxc72xc73xc10xc72xc73xc10x"
        DB 0x00

;;
;; We allow a single number to be entered into the storage-area, and used
;; for various purposes.  The value is copied here.
;;
;; The maximum value is 0xFFFF
;;
tmp_store:
        DB 0x00
        DB 0x00

;;
;; I/O port which is currently selected
;;
io_port:
        DB 0x00


;;
;; Error message when unknown characters are input
;;
error_character_msg:
        DB "Unknown character in input:$"

;;
;; Input buffer, when using the REPL
;;
IF REPL
input_buffer:
        DB 0x00
        DB 0x00
ENDIF
